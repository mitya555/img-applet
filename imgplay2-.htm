<!doctype html>
<html>
<head>
<script>
/**
 * Provides requestAnimationFrame in a cross browser way.
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 */
if ( !window.requestAnimationFrame ) {
	window.requestAnimationFrame = (function() {
		return window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		window.msRequestAnimationFrame ||
		function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {
			window.setTimeout( callback, 1000 / 60 );
		};
	})();
}
</script>
</head>
<body onload="registerAppletStateHandler()">
<object id="img-applet-ie"
  classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
  width="200" height="40">
  <param name="archive" value="img-applet.jar">
  <param name="code" value="img_applet.ImgApplet">
  <param name="java_status_events" value="true">
  <!--<param name="ffmpeg-re" value="">
  <param name="ffmpeg-f:i" value="">-->
  <param name="ffmpeg-i" value="rtmp://10.44.43.244/rtmp/v">
  <!--<param name="ffmpeg-i" value="rtmp://europaplus.cdnvideo.ru:1935/europaplus-live/eptv_main.sdp">-->
  <!--<param name="ffmpeg-i" value="rtmp://85.132.78.6:1935/live/muztv.stream">-->
  <!--<param name="ffmpeg-i" value="http://83.139.104.101/Content/HLS/Live/Channel(Sk_1)/index.m3u8">-->
  <!--<param name="ffmpeg-map" value="0:6">-->
  <param name="ffmpeg-c:v" value="mjpeg">
  <param name="ffmpeg-q:v" value="0.0">
  <!-- ‘-vsync parameter’
    Video sync method. For compatibility reasons old values can be specified as numbers. 
    Newly added values will have to be specified as strings always.
    ‘0, passthrough’ - Each frame is passed with its timestamp from the demuxer to the muxer. 
    ‘1, cfr’ - Frames will be duplicated and dropped to achieve exactly the requested constant frame rate. 
    ‘2, vfr’ - Frames are passed through with their timestamp or dropped so as to prevent 2 frames from having the same timestamp. 
    ‘drop’ - As passthrough but destroys all timestamps, making the muxer generate fresh timestamps based on frame-rate. 
    ‘-1, auto’ - Chooses between 1 and 2 depending on muxer capabilities. This is the default method.
  -->
  <param name="ffmpeg-vsync" value="0">
  <param name="ffmpeg-f:o" value="mjpeg">
  <param name="ffmpeg-an" value="">
  <!--<param name="ffmpeg-muxpreload" value="10">
  <param name="ffmpeg-muxdelay" value="10">
  <param name="ffmpeg-loglevel" value="warning">-->
  <param name="drop-unused-frames" value="yes">
  <param name="debug" value="yes">
  <comment>
    <embed id="img-applet"
      type="application/x-java-applet"
      width="100" height="40" 
      archive="img-applet.jar"
      code="img_applet.ImgApplet"
      pluginspage="http://java.com/download/"
      java_status_events="true"
      ffmpeg-i="rtmp://10.44.43.244/rtmp/v"
      ffmpeg-c:v="mjpeg"
      ffmpeg-q:v="0"
      ffmpeg-vsync="0"
      ffmpeg-f:o="mjpeg"
      ffmpeg-an=""
      drop-unused-frames="yes"
      debug="yes" />
  </comment>
</object>

<img id="image0" width="640" height="480" style="visibility: hidden; display: none;" />
<img id="image1" width="640" height="480" style="visibility: hidden; display: none;" />
<br />
<canvas id="videoImage" width="640" height="480"></canvas>

<script>

// global variables
var image, videoImage, videoImageContext, applet, applet_ie, _applet, sn = 0, last_img = -1, ffmpeg;
// assign variables to HTML elements
image = [ document.getElementById( 'image0' ), document.getElementById( 'image1' ) ];
videoImage = document.getElementById( 'videoImage' );
videoImageContext = videoImage.getContext( '2d' );
applet = document.getElementById( 'img-applet' );
applet_ie = document.getElementById( 'img-applet-ie' );
// background color if no video present
videoImageContext.fillStyle = '#005337';
videoImageContext.fillRect( 0, 0, videoImage.width, videoImage.height );				
// assign image elements onload handler
image[0].onload = image[1].onload = function() {
	videoImageContext.drawImage( this, 0, 0, videoImage.width, videoImage.height );
};

function checkAppletMethod(applet_, method) { return applet_ && (!method || (applet_[method] || typeof(applet_[method]) === "unknown")); }

function checkApplet(method) { if (!_applet) { if (applet && applet.createFFmpeg) { _applet = applet; } else if (applet_ie && typeof(applet_ie.createFFmpeg) === "unknown") { _applet = applet_ie; } } return checkAppletMethod(_applet, method); }

function registerAppletStateHandler() {
	var READY = 2;
	// register onLoad handler if applet has not loaded yet
	if (checkApplet()) {
		if (_applet.status < READY)  {                 
			_applet.onload = onLoadHandler;
		} else if (_applet.status >= READY) {
			// applet has already loaded or there was an error
			onLoadHandler();
		}
	}
}

function onLoadHandler() {
	// event handler for ready state

	_applet.createFFmpeg( [
		'ffmpeg-r', '25',
		'ffmpeg-f:i', 'dshow',
		'ffmpeg-i', 'video=Logitech QuickCam E3500',
		'ffmpeg-c:v', 'libx264',
		'ffmpeg-preset', 'ultrafast',
		'ffmpeg-tune', 'zerolatency',
		'ffmpeg-pix_fmt', 'yuv420p',
		'ffmpeg-g', '50',
		'ffmpeg-an', '',
		'ffmpeg-f:o', 'flv',
		'ffmpeg-o', 'rtmp://10.44.43.244/rtmp/v',
		//'debug', 'yes',
	] );

	ffmpeg = _applet;
	
	return;
	
	ffmpeg = _applet.createFFmpeg(
		//"ffmpeg-re", "",
		//"ffmpeg-f:i", "",
		"ffmpeg-i", "rtmp://10.44.40.80/rtmp/v",
		//"ffmpeg-i", "rtmp://europaplus.cdnvideo.ru:1935/europaplus-live/eptv_main.sdp",
		//"ffmpeg-i", "rtmp://85.132.78.6:1935/live/muztv.stream",
		//"ffmpeg-i", "http://83.139.104.101/Content/HLS/Live/Channel(Sk_1)/index.m3u8",
		//"ffmpeg-map", "0:6",
		"ffmpeg-c:v", "mjpeg",
		"ffmpeg-q:v", "0.0",
 /* ‘-vsync parameter’
    Video sync method. For compatibility reasons old values can be specified as numbers. 
    Newly added values will have to be specified as strings always.
    ‘0, passthrough’ - Each frame is passed with its timestamp from the demuxer to the muxer. 
    ‘1, cfr’ - Frames will be duplicated and dropped to achieve exactly the requested constant frame rate. 
    ‘2, vfr’ - Frames are passed through with their timestamp or dropped so as to prevent 2 frames from having the same timestamp. 
    ‘drop’ - As passthrough but destroys all timestamps, making the muxer generate fresh timestamps based on frame-rate. 
    ‘-1, auto’ - Chooses between 1 and 2 depending on muxer capabilities. This is the default method.
  */
		"ffmpeg-vsync", "0",
		"ffmpeg-f:o", "mjpeg",
		"ffmpeg-an", "",
		//"ffmpeg-muxpreload", "10",
		//"ffmpeg-muxdelay", "10",
		//"ffmpeg-loglevel", "warning",
		"drop-unused-frames", "yes",
		"debug", "yes");

	_applet.createFFmpeg(
		"ffmpeg-re", "no",
		"ffmpeg-analyzeduration", "1000",
		"ffmpeg-rtmp_buffer", "0",
		"ffmpeg-rtmp_live", "live",
		//"ffmpeg-f:i", "",
		"ffmpeg-i", "rtmp://10.44.40.80/rtmp/a",
		//"ffmpeg-c:a", "libmp3lame",
		//"ffmpeg-f:o", "mp3",
		//"mp3-frames-per-chunk", "1",
		"ffmpeg-f:o", "wav",
		"ffmpeg-vn", "",
		"debug", "yes");
}

// start the loop				
animate();

function animate() {
	requestAnimationFrame( animate );
	render();
}

var cnt = 0;

function render() {
	//if ((++cnt) % 2 != 0)
	//	return;
	if (ffmpeg) {
		var sn_ = ffmpeg.getSN();
		if ( sn_ != sn && sn_ > 0 ) {
			sn = sn_;
			var dataURI = ffmpeg.getDataURI();
			// drop frames accumulated in the queue
/*
			while (ffmpeg.getSN() > sn) {
				console.log("dropped frame # " + sn);
				sn = ffmpeg.getSN();
				dataURI = ffmpeg.getDataURI();
			}
*/ // we do it in the applet now when drop-unused-frames="yes"
			// assign image src
			image[last_img = (last_img + 1) % 2].src = dataURI;
		}
	}
}
</script>

</body>
</html>
