<!doctype html>
<html>
<head>
<!--<script type="text/javascript" src="http://www.java.com/js/deployJava.js"></script>-->
<script>
/**
 * Provides requestAnimationFrame in a cross browser way.
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 */
if ( !window.requestAnimationFrame ) {
	window.requestAnimationFrame = (function() {
		return window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		window.msRequestAnimationFrame ||
		function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {
			window.setTimeout( callback, 1000 / 60 );
		};
	})();
}
</script>
</head>
<body>
<!--<script>
/*deployJava.runApplet({
		code:		'img_applet.ImgApplet.class',
		archive:	'img-applet.jar',
		width:		100,
		height:	40
	}, {
		rtmp:		'rtmp://localhost/rtmp/webcam'
	});*/
script>-->
<object id="img-applet-ie"
  classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
  width="100" height="40">
  <param name="archive" value="img-applet.jar">
  <param name="code" value="img_applet.ImgApplet">
  <param name="ffmpeg-re" value="">
  <param name="ffmpeg-f:i" value="">
  <!--<param name="ffmpeg-i" value="rtmp://10.44.41.97/rtmp/webcam">-->
  <!--<param name="ffmpeg-i" value="rtmp://europaplus.cdnvideo.ru:1935/europaplus-live/eptv_main.sdp">-->
  <!--<param name="ffmpeg-i" value="rtmp://85.132.78.6:1935/live/muztv.stream">-->
  <param name="ffmpeg-i" value="http://83.139.104.101/Content/HLS/Live/Channel(Sk_1)/index.m3u8">
  <!--<param name="ffmpeg-map" value="0:6">-->
  <param name="ffmpeg-q:v" value="0.0">
  <!-- ‘-vsync parameter’
    Video sync method. For compatibility reasons old values can be specified as numbers. 
    Newly added values will have to be specified as strings always.
    ‘0, passthrough’ - Each frame is passed with its timestamp from the demuxer to the muxer. 
    ‘1, cfr’ - Frames will be duplicated and dropped to achieve exactly the requested constant frame rate. 
    ‘2, vfr’ - Frames are passed through with their timestamp or dropped so as to prevent 2 frames from having the same timestamp. 
    ‘drop’ - As passthrough but destroys all timestamps, making the muxer generate fresh timestamps based on frame-rate. 
    ‘-1, auto’ - Chooses between 1 and 2 depending on muxer capabilities. This is the default method.
  -->
  <param name="ffmpeg-vsync" value="0">
  <!--<param name="ffmpeg-muxpreload" value="10">
  <param name="ffmpeg-muxdelay" value="10">
  <param name="ffmpeg-loglevel" value="warning">-->
  <param name="debug" value="yes">
  <comment>
    <embed id="img-applet"
      type="application/x-java-applet"
      width="100" height="40" 
      archive="img-applet.jar"
      code="img_applet.ImgApplet"
      pluginspage="http://java.com/download/"
      ffmpeg-re=""
      ffmpeg-f:i=""
      ffmpeg-i="rtmp://europaplus.cdnvideo.ru:1935/europaplus-live/eptv_main.sdp"
      ffmpeg-q:v="0"
      ffmpeg-vsync="0"
      debug="no" />
    </comment>
  </object>

<!-- 
       ffmpeg-map="0:0"
      ffmpeg-an=""
-->
 
<!-- 
      ffmpeg-frames:d="3"
      ffmpeg-c:a="copy"
      ffmpeg-c:v="copy"
      ffmpeg-f:o="mp4"
      ffmpeg-movflags="frag_keyframe+empty_moov"
      ffmpeg-o="output.mp4"
 -->

<!--
<embed id="img-applet"
       type="application/x-java-applet"
       width="100" height="40" 
       archive="img-applet.jar"
       code="img_applet.ImgApplet"
       pluginspage="http://java.com/download/"
       rtmp="rtmp://localhost/rtmp/webcam"
       qscale="0.0" />-->

<img id="image0" width="1047" height="576" style="visibility: hidden; display: none;" />
<img id="image1" width="1047" height="576" style="visibility: hidden; display: none;" />
<br />
<canvas id="videoImage" width="1047" height="576"></canvas>

<object id="mp3-applet-ie"
  classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
  width="100" height="40">
  <param name="archive" value="img-applet.jar">
  <param name="code" value="img_applet.ImgApplet">
  <param name="ffmpeg-re" value="">
  <param name="ffmpeg-f:i" value="">
  <!--<param name="ffmpeg-i" value="rtmp://10.44.41.97/rtmp/webcam">-->
  <!--<param name="ffmpeg-i" value="rtmp://europaplus.cdnvideo.ru:1935/europaplus-live/eptv_main.sdp">-->
  <!--<param name="ffmpeg-i" value="rtmp://85.132.78.6:1935/live/muztv.stream">-->
  <param name="ffmpeg-i" value="http://83.139.104.101/Content/HLS/Live/Channel(Sk_1)/index.m3u8">
  <param name="ffmpeg-c:a" value="libmp3lame">
  <param name="ffmpeg-f:o" value="mp3">
  <param name="ffmpeg-vn" value="">
  <param name="debug" value="yes">
  <comment>
    <embed id="mp3-applet"
      type="application/x-java-applet"
      width="100" height="40" 
      archive="img-applet.jar"
      code="img_applet.ImgApplet"
      pluginspage="http://java.com/download/"
      ffmpeg-re=""
      ffmpeg-f:i=""
      ffmpeg-i="rtmp://europaplus.cdnvideo.ru:1935/europaplus-live/eptv_main.sdp"
      ffmpeg-c:a="libmp3lame"
      ffmpeg-f:o="mp3"
      ffmpeg-vn=""
      frame-buffer-size="20000"
      debug="yes" />
    </comment>
  </object>

<audio id="audio" autoplay>
  Your browser does not support the <code>audio</code> element.
</audio>

<script>

var width = 720, height = 540; // for the <embed> only

// global variables
var image, videoImage, videoImageContext, applet, applet_ie, applet_, sn = 0, last_img = -1;

var audio, mp3applet, mp3applet_ie, mp3applet_, mp3sn = 0;

// assign variables to HTML elements
image = [ document.getElementById( 'image0' ), document.getElementById( 'image1' ) ];
videoImage = document.getElementById( 'videoImage' );
videoImageContext = videoImage.getContext( '2d' );
applet = document.getElementById( 'img-applet' );
applet_ie = document.getElementById( 'img-applet-ie' );

audio = document.getElementById( 'audio' );
mp3applet = document.getElementById( 'mp3-applet' );
mp3applet_ie = document.getElementById( 'mp3-applet-ie' );

function checkApplet() {
	if (!applet_) {
		if (applet && applet.getSN) {
			applet_ = applet;
			image[0].width = image[1].width = videoImage.width = width;
			image[0].height = image[1].height = videoImage.height = height;
		} else if (applet_ie && typeof(applet_ie.getSN) === "unknown")
			applet_ = applet_ie;
	}
	return applet_;
}

function checkMp3Applet() {
	if (!mp3applet_) {
		if (mp3applet && mp3applet.getSN)
			mp3applet_ = mp3applet;
		else if (mp3applet_ie && typeof(mp3applet_ie.getSN) === "unknown")
			mp3applet_ = mp3applet_ie;
	}
	return mp3applet_;
}

// background color if no video present
videoImageContext.fillStyle = '#005337';
videoImageContext.fillRect( 0, 0, videoImage.width, videoImage.height );				

image[0].onload = image[1].onload = function() {
	videoImageContext.drawImage( this, 0, 0, videoImage.width, videoImage.height );
};

//window.requestAnimationFrame = function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {
//	window.setTimeout( callback, 1 );
//};

// start the loop				
animate();

function animate() {
	requestAnimationFrame( animate );
	render();		
}

var cnt = 0;

function render() {
	if ((++cnt) % 2 != 0)
		return;
	if (checkApplet()) {
		var sn_ = applet_.getSN();
		if ( sn_ != sn ) {
			sn = sn_;
			image[last_img = (last_img + 1) % 2].src = applet_.getDataURI();
		}
	}
	if (checkMp3Applet()) {
		var mp3sn_ = mp3applet_.getSN();
		if ( mp3sn_ != mp3sn ) {
			mp3sn = mp3sn_;
			audio.src = mp3applet_.getDataURI();
		}
	}
}
</script>

</body>
</html>
